type Factory @entity {
    # factory address
    id: ID!
    # amount of pools created
    poolCount: Int!
    # amoutn of transactions all time
    txCount: Int!
    # total volume all time in derived USD
    totalVolumeUSD: Float!
    # total volume all time in derived ETH
    totalVolumeETH: Float!
    # total swap fees all time in USD
    totalFeesUSD: Float!
    # total swap fees all time in USD
    totalFeesETH: Float!
    # all volume even through less reliable USD values
    untrackedVolumeUSD: Float!
    # TVL derived in USD
    totalValueLockedUSD: Float!
    # TVL derived in ETH
    totalValueLockedETH: Float!
    # TVL derived in USD untracked
    totalValueLockedUSDUntracked: Float!
    # TVL derived in ETH untracked
    totalValueLockedETHUntracked: Float!

    # current owner of the factory
    owner: ID!
}

# stores for USD calculations
type Bundle @entity {
    id: ID!
    # price of ETH in usd
    ethPriceUSD: Float!
}

type Token @entity {
    # token address
    id: ID!
    # token symbol
    symbol: String!
    # token name
    name: String!
    # token decimals
    decimals: Int!
    # token total supply
    totalSupply: BigInt!
    # volume in token units
    volume: Float!
    # volume in derived USD
    volumeUSD: Float!
    # volume in USD even on pools with less reliable USD values
    untrackedVolumeUSD: Float!
    # fees in USD
    feesUSD: Float!
    # transactions across all pools that include this token
    txCount: Int!
    # number of pools containing this token
    poolCount: BigInt!
    # liquidity across all pools in token units
    totalValueLocked: Float!
    # liquidity across all pools in derived USD
    totalValueLockedUSD: Float!
    # TVL derived in USD untracked
    totalValueLockedUSDUntracked: Float!
    # derived price in ETH
    derivedETH: Float!
    # pools token is in that are white listed for USD pricing
    whitelistPools: [ID!]!
    # derived fields
    tokenDayData: [TokenDayData!]! @derivedFrom(field: "token")
}

type Pool @entity {
    # pool address
    id: ID!
    # creation
    createdAtTimestamp: DateTime!
    # block pool was created at
    createdAtBlockNumber: Int!
    # token0
    token0Id: ID!
    token0: Token!
    # token1
    token1Id: ID!
    token1: Token!
    # fee amount
    feeTier: Int!
    # in range liquidity
    liquidity: BigInt!
    # current price tracker
    sqrtPrice: BigInt!
    # tracker for global fee growth
    feeGrowthGlobal0X128: BigInt!
    # tracker for global fee growth
    feeGrowthGlobal1X128: BigInt!
    # token0 per token1
    token0Price: Float!
    # token1 per token0
    token1Price: Float!
    # current tick
    tick: Int
    # current observation index
    observationIndex: BigInt!
    # all time token0 swapped
    volumeToken0: Float!
    # all time token1 swapped
    volumeToken1: Float!
    # all time USD swapped
    volumeUSD: Float!
    # all time USD swapped, unfiltered for unreliable USD pools
    untrackedVolumeUSD: Float!
    # fees in USD
    feesUSD: Float!
    # all time number of transactions
    txCount: Int!
    # all time fees collected token0
    collectedFeesToken0: Float!
    # all time fees collected token1
    collectedFeesToken1: Float!
    # all time fees collected derived USD
    collectedFeesUSD: Float!
    # total token 0 across all ticks
    totalValueLockedToken0: Float!
    # total token 1 across all ticks
    totalValueLockedToken1: Float!
    # tvl derived ETH
    totalValueLockedETH: Float!
    # tvl USD
    totalValueLockedUSD: Float!
    # TVL derived in USD untracked
    totalValueLockedUSDUntracked: Float!
    # Fields used to help derived relationship
    liquidityProviderCount: BigInt! # used to detect new exchanges
    # hourly snapshots of pool data
    poolHourData: [PoolHourData!]! @derivedFrom(field: "pool")
    # daily snapshots of pool data
    poolDayData: [PoolDayData!]! @derivedFrom(field: "pool")
    # derived fields
    mints: [Mint!]! @derivedFrom(field: "pool")
    burns: [Burn!]! @derivedFrom(field: "pool")
    swaps: [Swap!]! @derivedFrom(field: "pool")
    collects: [Collect!]! @derivedFrom(field: "pool")
    ticks: [Tick!]! @derivedFrom(field: "pool")
}

type Tick @entity {
    # format: <pool address>#<tick index>
    id: ID!
    # pool address
    poolAddress: String
    # tick index
    tickIdx: BigInt!
    # pointer to pool
    poolId: ID!
    pool: Pool!
    # total liquidity pool has as tick lower or upper
    liquidityGross: BigInt!
    # how much liquidity changes when tick crossed
    liquidityNet: BigInt!
    # calculated price of token0 of tick within this pool - constant
    price0: Float!
    # calculated price of token1 of tick within this pool - constant
    price1: Float!
    # lifetime volume of token0 with this tick in range
    volumeToken0: Float!
    # lifetime volume of token1 with this tick in range
    volumeToken1: Float!
    # lifetime volume in derived USD with this tick in range
    volumeUSD: Float!
    # lifetime volume in untracked USD with this tick in range
    untrackedVolumeUSD: Float!
    # fees in USD
    feesUSD: Float!
    # all time collected fees in token0
    collectedFeesToken0: Float!
    # all time collected fees in token1
    collectedFeesToken1: Float!
    # all time collected fees in USD
    collectedFeesUSD: Float!
    # created time
    createdAtTimestamp: DateTime!
    # created block
    createdAtBlockNumber: Int!
    # Fields used to help derived relationship
    liquidityProviderCount: BigInt! # used to detect new exchanges
    # derived fields
    # swaps: [Swap!]! @derivedFrom(field: "tick")
    # vars needed for fee computation
    feeGrowthOutside0X128: BigInt!
    feeGrowthOutside1X128: BigInt!
}

type Position @entity {
    # Positions created through NonfungiblePositionManager
    # NFT token id
    id: ID!
    # owner of the NFT
    owner: String!
    # pool position is within
    poolId: ID!
    pool: Pool!
    # allow indexing by tokens
    token0Id: ID!
    token0: Token!
    # allow indexing by tokens
    token1Id: ID!
    token1: Token!
    # total position liquidity
    liquidity: BigInt!
    # amount of token 0 ever deposited to position
    depositedToken0: Float!
    # amount of token 1 ever deposited to position
    depositedToken1: Float!
    # amount of token 0 ever withdrawn from position (without fees)
    withdrawnToken0: Float!
    # amount of token 1 ever withdrawn from position (without fees)
    withdrawnToken1: Float!
    # all time collected fees in token0
    collectedFeesToken0: Float!
    # all time collected fees in token1
    collectedFeesToken1: Float!
    # vars needed for fee computation
    feeGrowthInside0LastX128: BigInt!
    feeGrowthInside1LastX128: BigInt!
}

type PositionSnapshot @entity {
    # <NFT token id>#<block number>
    id: ID!
    # owner of the NFT
    owner: String!
    # pool the position is within
    poolId: ID!
    pool: Pool!
    # position of which the snap was taken of
    positionId: ID!
    position: Position!
    # block in which the snap was created
    blockNumber: Int!
    # timestamp of block in which the snap was created
    timestamp: DateTime!
    # total position liquidity
    liquidity: BigInt!
    # amount of token 0 ever deposited to position
    depositedToken0: Float!
    # amount of token 1 ever deposited to position
    depositedToken1: Float!
    # amount of token 0 ever withdrawn from position (without fees)
    withdrawnToken0: Float!
    # amount of token 1 ever withdrawn from position (without fees)
    withdrawnToken1: Float!
    # all time collected fees in token0
    collectedFeesToken0: Float!
    # all time collected fees in token1
    collectedFeesToken1: Float!
    # tx in which the snapshot was initialized
    transactionId: ID!
    transaction: Transaction!
    # internal vars needed for fee computation
    feeGrowthInside0LastX128: BigInt!
    feeGrowthInside1LastX128: BigInt!
}

type Transaction @entity {
    # txn hash
    id: ID!
    # block txn was included in
    blockNumber: Int!
    # timestamp txn was confirmed
    timestamp: DateTime!
    # gas used during txn execution
    gasUsed: BigInt!
    gasPrice: BigInt!
    # derived values
    mints: [Mint]! @derivedFrom(field: "transaction")
    burns: [Burn]! @derivedFrom(field: "transaction")
    swaps: [Swap]! @derivedFrom(field: "transaction")
    flashed: [Flash]! @derivedFrom(field: "transaction")
    collects: [Collect]! @derivedFrom(field: "transaction")
}

type Mint @entity {
    # transaction hash + "#" + index in mints Transaction array
    id: ID!
    # which txn the mint was included in
    transactionId: ID!
    transaction: Transaction!
    # time of txn
    timestamp: DateTime!
    # pool position is within
    poolId: ID!
    pool: Pool!
    # allow indexing by tokens
    token0Id: ID!
    token0: Token!
    # allow indexing by tokens
    token1Id: ID!
    token1: Token!
    # owner of position where liquidity minted to
    owner: String!
    # the address that minted the liquidity
    sender: String
    # txn origin
    origin: String! # the EOA that initiated the txn
    # amount of liquidity minted
    amount: BigInt!
    # amount of token 0 minted
    amount0: Float!
    # amount of token 1 minted
    amount1: Float!
    # derived amount based on available prices of tokens
    amountUSD: Float
    # lower tick of the position
    tickLower: Int!
    # upper tick of the position
    tickUpper: Int!
    # order within the txn
    logIndex: Int
}

type Burn @entity {
    # transaction hash + "#" + index in mints Transaction array
    id: ID!
    # txn burn was included in
    transactionId: ID!
    transaction: Transaction!
    # pool position is within
    poolId: ID!
    pool: Pool!
    # allow indexing by tokens
    token0Id: ID!
    token0: Token!
    # allow indexing by tokens
    token1Id: ID!
    token1: Token!
    # need this to pull recent txns for specific token or pool
    timestamp: DateTime!
    # owner of position where liquidity was burned
    owner: String
    # txn origin
    origin: String! # the EOA that initiated the txn
    # amouny of liquidity burned
    amount: BigInt!
    # amount of token 0 burned
    amount0: Float!
    # amount of token 1 burned
    amount1: Float!
    # derived amount based on available prices of tokens
    amountUSD: Float
    # lower tick of position
    tickLower: Int!
    # upper tick of position
    tickUpper: Int!
    # position within the transactions
    logIndex: Int
}

type Swap @entity {
    # transaction hash + "#" + index in swaps Transaction array
    id: ID!
    # pointer to transaction
    transaction: Transaction!
    transactionId: ID!
    # timestamp of transaction
    timestamp: DateTime!
    # pool swap occured within
    pool: Pool!
    poolId: ID!
    # allow indexing by tokens
    token0Id: ID!
    token0: Token!
    # allow indexing by tokens
    token1Id: ID!
    token1: Token!
    # sender of the swap
    sender: String!
    # recipient of the swap
    recipient: String!
    # txn origin
    origin: String! # the EOA that initiated the txn
    # delta of token0 swapped
    amount0: Float!
    # delta of token1 swapped
    amount1: Float!
    # derived info
    amountUSD: Float!
    # The sqrt(price) of the pool after the swap, as a Q64.96
    sqrtPriceX96: BigInt!
    # the tick after the swap
    tick: Int!
    # index within the txn
    logIndex: Int
}

type Collect @entity {
    # transaction hash + "#" + index in collect Transaction array
    id: ID!
    # pointer to txn
    transactionId: ID!
    transaction: Transaction!
    # timestamp of event
    timestamp: DateTime!
    # pool collect occured within
    poolId: ID!
    pool: Pool!
    # owner of position collect was performed on
    owner: String
    # amount of token0 collected
    amount0: Float!
    # amount of token1 collected
    amount1: Float!
    # derived amount based on available prices of tokens
    amountUSD: Float
    # lower tick of position
    tickLower: Int!
    # uppper tick of position
    tickUpper: Int!
    # index within the txn
    logIndex: Int
}

type Flash @entity {
    # transaction hash + "-" + index in collect Transaction array
    id: ID!
    # pointer to txn
    transaction: Transaction!
    transactionId: ID!
    # timestamp of event
    timestamp: DateTime!
    # pool collect occured within
    poolId: ID!
    pool: Pool!
    # sender of the flash
    sender: String!
    # recipient of the flash
    recipient: String!
    # amount of token0 flashed
    amount0: Float!
    # amount of token1 flashed
    amount1: Float!
    # derived amount based on available prices of tokens
    amountUSD: Float!
    # amount token0 paid for flash
    amount0Paid: Float!
    # amount token1 paid for flash
    amount1Paid: Float!
    # index within the txn
    logIndex: Int
}

# Data accumulated and condensed into day stats for all of Uniswap
type UniswapDayData @entity {
    # timestamp rounded to current day by dividing by 86400
    id: ID!
    # timestamp rounded to current day by dividing by 86400
    date: DateTime!
    # total daily volume in Uniswap derived in terms of ETH
    volumeETH: Float!
    # total daily volume in Uniswap derived in terms of USD
    volumeUSD: Float!
    # total daily volume in Uniswap derived in terms of USD untracked
    volumeUSDUntracked: Float!
    # fees in USD
    feesUSD: Float!
    # number of daily transactions
    txCount: Int!
    # tvl in terms of USD
    tvlUSD: Float!
}

# Data accumulated and condensed into day stats for each pool
type PoolDayData @entity {
    # timestamp rounded to current day by dividing by 86400
    id: ID!
    # timestamp rounded to current day by dividing by 86400
    date: DateTime!
    # pointer to pool
    poolId: ID!
    pool: Pool!
    # in range liquidity at end of period
    liquidity: BigInt!
    # current price tracker at end of period
    sqrtPrice: BigInt!
    # price of token0 - derived from sqrtPrice
    token0Price: Float!
    # price of token1 - derived from sqrtPrice
    token1Price: Float!
    # current tick at end of period
    tick: Int
    # tracker for global fee growth
    feeGrowthGlobal0X128: BigInt!
    # tracker for global fee growth
    feeGrowthGlobal1X128: BigInt!
    # tvl derived in USD at end of period
    tvlUSD: Float!
    # volume in token0
    volumeToken0: Float!
    # volume in token1
    volumeToken1: Float!
    # volume in USD
    volumeUSD: Float!
    # fees in USD
    feesUSD: Float!
    # numebr of transactions during period
    txCount: Int!
    # opening price of token0
    open: Float!
    # high price of token0
    high: Float!
    # low price of token0
    low: Float!
    # close price of token0
    close: Float!
}

# hourly stats tracker for pool
type PoolHourData @entity {
    # format: <pool address>-<timestamp>
    id: ID!
    # unix timestamp for start of hour
    date: DateTime!
    # pointer to pool
    poolId: ID!
    pool: Pool!
    # in range liquidity at end of period
    liquidity: BigInt!
    # current price tracker at end of period
    sqrtPrice: BigInt!
    # price of token0 - derived from sqrtPrice
    token0Price: Float!
    # price of token1 - derived from sqrtPrice
    token1Price: Float!
    # current tick at end of period
    tick: Int
    # tracker for global fee growth
    feeGrowthGlobal0X128: BigInt!
    # tracker for global fee growth
    feeGrowthGlobal1X128: BigInt!
    # tvl derived in USD at end of period
    tvlUSD: Float!
    # volume in token0
    volumeToken0: Float!
    # volume in token1
    volumeToken1: Float!
    # volume in USD
    volumeUSD: Float!
    # fees in USD
    feesUSD: Float!
    # numebr of transactions during period
    txCount: Int!
    # opening price of token0
    open: Float!
    # high price of token0
    high: Float!
    # low price of token0
    low: Float!
    # close price of token0
    close: Float!
}

type TickHourData @entity {
    # format: <pool address>-<tick index>-<timestamp>
    id: ID!
    # unix timestamp for start of hour
    date: DateTime!
    # pointer to pool
    poolId: ID!
    pool: Pool!
    # pointer to tick
    tickId: ID!
    tick: Tick!
    # total liquidity pool has as tick lower or upper at end of period
    liquidityGross: BigInt!
    # how much liquidity changes when tick crossed at end of period
    liquidityNet: BigInt!
    # hourly volume of token0 with this tick in range
    volumeToken0: Float!
    # hourly volume of token1 with this tick in range
    volumeToken1: Float!
    # hourly volume in derived USD with this tick in range
    volumeUSD: Float!
    # fees in USD
    feesUSD: Float!
}

# Data accumulated and condensed into day stats for each exchange
# Note: this entity gets saved only if there is a change during the day
type TickDayData @entity {
    # format: <pool address>-<tick index>-<timestamp>
    id: ID!
    # timestamp rounded to current day by dividing by 86400
    date: DateTime!
    # pointer to tick
    tickId: ID!
    tick: Tick!
    # total liquidity pool has as tick lower or upper at end of period
    liquidityGross: BigInt!
    # how much liquidity changes when tick crossed at end of period
    liquidityNet: BigInt!
    # hourly volume of token0 with this tick in range
    volumeToken0: Float!
    # hourly volume of token1 with this tick in range
    volumeToken1: Float!
    # hourly volume in derived USD with this tick in range
    volumeUSD: Float!
    # fees in USD
    feesUSD: Float!
    # vars needed for fee computation
    feeGrowthOutside0X128: BigInt!
    feeGrowthOutside1X128: BigInt!
}

type TokenDayData @entity {
    # token address concatendated with date
    id: ID!
    # timestamp rounded to current day by dividing by 86400
    date: DateTime!
    # pointer to token
    tokenId: ID!
    token: Token!
    # volume in token units
    volume: Float!
    # volume in derived USD
    volumeUSD: Float!
    # volume in USD even on pools with less reliable USD values
    untrackedVolumeUSD: Float!
    # liquidity across all pools in token units
    totalValueLocked: Float!
    # liquidity across all pools in derived USD
    totalValueLockedUSD: Float!
    # price at end of period in USD
    priceUSD: Float!
    # fees in USD
    feesUSD: Float!
    # opening price USD
    open: Float!
    # high price USD
    high: Float!
    # low price USD
    low: Float!
    # close price USD
    close: Float!
}

type TokenHourData @entity {
    # token address concatendated with date
    id: ID!
    # unix timestamp for start of hour
    date: DateTime!
    # pointer to token
    tokenId: ID!
    token: Token!
    # volume in token units
    volume: Float!
    # volume in derived USD
    volumeUSD: Float!
    # volume in USD even on pools with less reliable USD values
    untrackedVolumeUSD: Float!
    # liquidity across all pools in token units
    totalValueLocked: Float!
    # liquidity across all pools in derived USD
    totalValueLockedUSD: Float!
    # price at end of period in USD
    priceUSD: Float!
    # fees in USD
    feesUSD: Float!
    # opening price USD
    open: Float!
    # high price USD
    high: Float!
    # low price USD
    low: Float!
    # close price USD
    close: Float!
}
